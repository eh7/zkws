/* eslint-disable no-console */

import { noise } from '@chainsafe/libp2p-noise'
import { yamux } from '@chainsafe/libp2p-yamux'
import { webSockets } from '@libp2p/websockets'
import * as filters from '@libp2p/websockets/filters'
import { createLibp2p } from 'libp2p'
import { circuitRelayServer } from 'libp2p/circuit-relay'
import { identifyService } from 'libp2p/identify'

import { floodsub } from '@libp2p/floodsub'

import { gossipsub } from '@chainsafe/libp2p-gossipsub'
import { multiaddr } from '@multiformats/multiaddr'

if (!process.argv[2]) {
  console.log("UASAGE: node ", process.argv[1])
  process.exit(1);
}

const server = await createLibp2p({
  addresses: {
    listen: ['/ip4/127.0.0.1/tcp/0/ws']
  },
  transports: [
    webSockets({
      filter: filters.all
    })
  ],
  connectionEncryption: [noise()],
  streamMuxers: [yamux()],
  services: {
    identify: identifyService(),
    //pubsub: gossipsub(),
    pubsub: floodsub(),
    relay: circuitRelayServer()
  }
})

await server.start()

console.log('Relay listening on multiaddr(s): ', server.getMultiaddrs().map((ma) => ma.toString()))

const dial = async () => {
  const value = process.argv[2] //"/ip4/127.0.0.1/tcp/44225/ws/p2p/12D3KooWRAyb4BPi5Q5FFQuApEdYXmVrKDZpst1JwYzq27GjgPoe"
  const ma = multiaddr(value)
  console.log(`Dialing '${ma}'`)
  await server.dial(ma)
  console.log(`Connected to '${ma}'`)
}

const run = async () => {
  dial()
  const topic = "testing"
  server.services.pubsub.subscribe(topic)
  console.log(server.services.pubsub)
  const peerList = server.services.pubsub.getSubscribers(topic)
  console.log('peerList', peerList)
}

run()
